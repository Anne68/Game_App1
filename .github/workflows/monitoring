name: Production Monitoring

on:
  schedule:
    # Toutes les 6 heures
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      api_url:
        description: "URL de l'API √† monitorer"
        required: false
        default: 'https://game-app-y8be.onrender.com'
      alert_level:
        description: "Niveau d'alerte"
        required: false
        default: 'warning'
        type: choice
        options: [info, warning, critical]

concurrency:
  group: production-monitoring
  cancel-in-progress: true

jobs:
  health-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      # Valeur par d√©faut si l'entr√©e du workflow est vide
      API_URL: ${{ github.event.inputs.api_url != '' && github.event.inputs.api_url || 'https://game-app-y8be.onrender.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests python-dotenv

      # ---- WARM-UP & HEALTH CHECK (curl) ----
      # On tente /healthz puis / avec retries + backoff pour r√©veiller Render.
      - name: Warm up & Health check (curl with retries)
        shell: bash
        run: |
          set -e
          URL="${API_URL%/}"
          echo "üè• V√©rification (curl) de: $URL"

          try_once () {
            local path="$1"
            # accepte 2xx/3xx/4xx (service joignable), timeout 25s
            CODE=$(curl -s -o /dev/null -w "%{http_code}" \
              --connect-timeout 10 \
              --max-time 25 \
              --retry 2 \
              --retry-all-errors \
              "$URL$path" || true)
            echo "  -> $path => HTTP ${CODE:-none}"
            if [[ "$CODE" =~ ^[234][0-9]{2}$ ]]; then
              return 0
            fi
            return 1
          }

          for i in {1..8}; do
            # on tente d'abord /healthz puis /
            if try_once "/healthz" || try_once "/"; then
              echo "‚úÖ Service joignable."
              exit 0
            fi
            SLEEP=$(( 5 + i*5 ))
            echo "‚è≥ Nouvelle tentative dans ${SLEEP}s‚Ä¶"
            sleep "$SLEEP"
          done

          echo "‚ùå Le service n'a pas r√©pondu √† temps (curl)."
          exit 1

      # ---- Fallback Python plus verbeux (ne s'ex√©cute que si l'√©tape pr√©c√©dente √©choue) ----
      - name: API Health Check (Python fallback)
        if: ${{ failure() }}
        run: |
          python - <<'PY'
          import os, time, requests, sys
          url = (os.getenv("API_URL") or "https://game-app-y8be.onrender.com").rstrip("/")
          print(f"üè• V√©rification (Python) de: {url}")

          paths = ["/healthz", "/"]
          for attempt in range(1, 7):
              for path in paths:
                  try:
                      r = requests.get(url + path, timeout=25)
                      print(f"Attempt {attempt} {path}: {r.status_code}")
                      if 200 <= r.status_code < 500:
                          # si /healthz renvoie du JSON avec des cl√©s de statut, on v√©rifie
                          if path == "/healthz":
                              try:
                                  data = r.json()
                                  status = data.get("status", "unknown")
                                  model_loaded = data.get("model_loaded", True)
                                  db_ready = data.get("db_ready", True)
                                  print(f"Status={status}, model_loaded={model_loaded}, db_ready={db_ready}")
                                  if status == "healthy" and model_loaded and db_ready:
                                      print("üéâ Health check passed")
                                      sys.exit(0)
                                  else:
                                      print("‚ö†Ô∏è /healthz OK mais statut applicatif non healthy.")
                              except Exception as e:
                                  print(f"‚ÑπÔ∏è /healthz non-JSON ou parsing rat√©: {e}")
                          else:
                              print("‚úÖ Service joignable (m√™me si /healthz indisponible).")
                              sys.exit(0)
                  except Exception as e:
                      print(f"Attempt {attempt} {path} error: {e}")
              time.sleep(15 * attempt)

          print("üí• Health check failed after retries.")
          sys.exit(1)
          PY

  security-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      API_URL: ${{ github.event.inputs.api_url != '' && github.event.inputs.api_url || 'https://game-app-y8be.onrender.com' }}

    steps:
      - name: Check SSL/TLS
        shell: bash
        run: |
          URL="${API_URL%/}"
          HOSTNAME=$(echo "$URL" | sed 's|https\?://||' | cut -d'/' -f1)
          echo "üîí Checking SSL for: $HOSTNAME"

          if command -v openssl >/dev/null 2>&1; then
            echo | openssl s_client -servername "$HOSTNAME" -connect "$HOSTNAME:443" -brief 2>/dev/null | head -20 || true
            EXPIRY=$(echo | openssl s_client -servername "$HOSTNAME" -connect "$HOSTNAME:443" 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
            if [ -n "$EXPIRY" ]; then
              echo "üìÖ Certificate expires: $EXPIRY"
            fi
          else
            echo "‚ö†Ô∏è OpenSSL not available for SSL check"
          fi

      - name: Check API Security Headers
        run: |
          python - <<'PY'
          import os, requests
          url = (os.getenv("API_URL") or "https://game-app-y8be.onrender.com").rstrip("/")
          try:
              r = requests.get(url + "/healthz", timeout=15)
              headers = r.headers
              security_headers = [
                  "X-Content-Type-Options",
                  "X-Frame-Options",
                  "X-XSS-Protection",
                  "Strict-Transport-Security",
              ]
              print("üõ°Ô∏è Security Headers Check:")
              for h in security_headers:
                  if h in headers:
                      print(f"  ‚úÖ {h}: {headers[h]}")
                  else:
                      print(f"  ‚ö†Ô∏è {h}: Missing")
          except Exception as e:
              print(f"‚ö†Ô∏è Security headers check error: {e}")
